// <auto-generated />
using LinguaNovaBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LinguaNovaBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250323141431_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("LinguaNovaBackend.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.ArticleTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ArticleId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleTests");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.Audio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Audios");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.AudioTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AudioId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AudioId");

                    b.ToTable("AudioTests");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.UserTestProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ArticleTestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AudioTestId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VideoTestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArticleTestId");

                    b.HasIndex("AudioTestId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoTestId");

                    b.ToTable("UserTestProgresses");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.VideoTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VideoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoTests");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.ArticleTest", b =>
                {
                    b.HasOne("LinguaNovaBackend.Models.Article", "Article")
                        .WithMany("ArticleTests")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.AudioTest", b =>
                {
                    b.HasOne("LinguaNovaBackend.Models.Audio", "Audio")
                        .WithMany("AudioTests")
                        .HasForeignKey("AudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audio");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.UserTestProgress", b =>
                {
                    b.HasOne("LinguaNovaBackend.Models.ArticleTest", "ArticleTest")
                        .WithMany("UserTestProgresses")
                        .HasForeignKey("ArticleTestId");

                    b.HasOne("LinguaNovaBackend.Models.AudioTest", "AudioTest")
                        .WithMany("UserTestProgresses")
                        .HasForeignKey("AudioTestId");

                    b.HasOne("LinguaNovaBackend.Models.User", "User")
                        .WithMany("TestProgress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LinguaNovaBackend.Models.VideoTest", "VideoTest")
                        .WithMany("UserTestProgresses")
                        .HasForeignKey("VideoTestId");

                    b.Navigation("ArticleTest");

                    b.Navigation("AudioTest");

                    b.Navigation("User");

                    b.Navigation("VideoTest");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.VideoTest", b =>
                {
                    b.HasOne("LinguaNovaBackend.Models.Video", "Video")
                        .WithMany("VideoTests")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.Article", b =>
                {
                    b.Navigation("ArticleTests");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.ArticleTest", b =>
                {
                    b.Navigation("UserTestProgresses");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.Audio", b =>
                {
                    b.Navigation("AudioTests");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.AudioTest", b =>
                {
                    b.Navigation("UserTestProgresses");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.User", b =>
                {
                    b.Navigation("TestProgress");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.Video", b =>
                {
                    b.Navigation("VideoTests");
                });

            modelBuilder.Entity("LinguaNovaBackend.Models.VideoTest", b =>
                {
                    b.Navigation("UserTestProgresses");
                });
#pragma warning restore 612, 618
        }
    }
}
